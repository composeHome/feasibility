
==================== FINAL INTERFACE ====================
2017-10-27 23:06:34.324379 UTC

interface feasibility-0.1.0.0-LXGXKrOU6Ol96dhoSQRxrd:House 8002
  interface hash: 16c7f9249fa78c8d0b1d49310ebf229f
  ABI hash: 2274ad159ac3f3f39c50c7a43fc08a0b
  export-list hash: 1ebeec6df6ed053921bb3271b6a7731a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7e694751bbbc265a28b8a68aee53e9a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  House.House{House.House address area bathrooms bedrooms client comparable_zillow_id costs land_area zipcode}
module dependencies:
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      yaml-0.8.23.3@yaml-0.8.23.3-C6ya2ht5lnU5AAyP9utctL
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Conduit
                         conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Pipe
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.FromJSON f51fffb1f8daae31daf33b152fc89c41
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show 516b88f1e0e0dbed91cb925542602306
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
import  -/  yaml-0.8.23.3@yaml-0.8.23.3-C6ya2ht5lnU5AAyP9utctL:Data.Yaml f81dbbbfc1d3df16953eefc272d453b3
c98956b4b1fbbf52d116a6ff29e13d5f
  $fFromJSONHouse :: Data.Aeson.Types.FromJSON.FromJSON House.House
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.House
                  House.$fFromJSONHouse_$cparseJSON
                  House.$fFromJSONHouse_$cparseJSONList -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fFromJSONHouse1 ::
    [Data.Aeson.Types.Internal.Parser House.House]
    -> forall (f :: * -> *) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success [House.House] f r
       -> f r
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><L,C(U)> -}
2c5ebada6088eb9d518a061b9b843bee
  $fFromJSONHouse2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "[a]"#) -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fFromJSONHouse_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser House.House
  {- Arity: 1, Strictness: <S,1*U> -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fFromJSONHouse_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [House.House]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Aeson.Types.FromJSON.typeMismatch
                        @ [House.House]
                        House.$fFromJSONHouse2
                        wild
                   Data.Aeson.Types.Internal.Array a1
                   -> case a1 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      (House.$fFromJSONHouse1
                         (letrec {
                            $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww dt1) of wild2 {
                                GHC.Types.False
                                -> case GHC.Prim.indexArray#
                                          @ Data.Aeson.Types.Internal.Value
                                          dt2
                                          (GHC.Prim.+# dt ww) of ds1 { Unit# ipv ->
                                   GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv
                                     ($wgo (GHC.Prim.+# ww 1#)) }
                                GHC.Types.True -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                          } in
                          House.$fFromJSONHouse_go 0# ($wgo 0#)))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[House.House]>_R)) } }) -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fFromJSONHouse_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> [Data.Aeson.Types.Internal.Parser House.House]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
b60b0bb938399c2b22508c545bef257d
  $fShowCost :: GHC.Show.Show House.Cost
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.Cost
                  House.$fShowCost_$cshowsPrec
                  House.$fShowCost_$cshow
                  House.$fShowCost_$cshowList -}
b60b0bb938399c2b22508c545bef257d
  $fShowCost1 :: House.Cost -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: House.Cost) (w1 :: GHC.Base.String) ->
                 House.$w$cshowsPrec 0# w w1) -}
cbc20816a09802172e06d8e907496c43
  $fShowCost2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Category "#) -}
268b20d73e85d74e3206e450bd6a52dd
  $fShowCost3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Unit "#) -}
471070deedc21b6bee7d72076c23c9ca
  $fShowCost4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VariableCost "#) -}
40f760a503f1b66bbd3cbe9fe4396fd6
  $fShowCost5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Price "#) -}
ad63a4a569df70f5b0b5b549b6604cb3
  $fShowCost6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Name "#) -}
dbda989a2dd376a5a43cbb612fe41bf4
  $fShowCost7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FixedCost "#) -}
b60b0bb938399c2b22508c545bef257d
  $fShowCost_$cshow :: House.Cost -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: House.Cost) ->
                 House.$fShowCost_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b60b0bb938399c2b22508c545bef257d
  $fShowCost_$cshowList :: [House.Cost] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ House.Cost House.$fShowCost1) -}
b60b0bb938399c2b22508c545bef257d
  $fShowCost_$cshowsPrec ::
    GHC.Types.Int -> House.Cost -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: House.Cost)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 House.$w$cshowsPrec ww1 w1 w2 }) -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fShowHouse :: GHC.Show.Show House.House
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.House
                  House.$fShowHouse_$cshowsPrec
                  House.$fShowHouse_$cshow
                  House.$fShowHouse_$cshowList -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fShowHouse1 :: House.House -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: House.House) (w1 :: GHC.Base.String) ->
                 case w of ww { House.House ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 House.$w$cshowsPrec5
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   w1 }) -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fShowHouse_$cshow :: House.House -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: House.House) ->
                 House.$fShowHouse_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fShowHouse_$cshowList :: [House.House] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ House.House
                   House.$fShowHouse1) -}
c98956b4b1fbbf52d116a6ff29e13d5f
  $fShowHouse_$cshowsPrec ::
    GHC.Types.Int -> House.House -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: House.House)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { House.House ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                 House.$w$cshowsPrec5
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   w2 } }) -}
98b583dc432036403983fa0391353b95
  $fShowName :: GHC.Show.Show House.Name
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.Name
                  House.$fShowName_$cshowsPrec
                  House.$fShowName_$cshow
                  House.$fShowName_$cshowList -}
98b583dc432036403983fa0391353b95
  $fShowName1 :: House.Name -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: House.Name) (w1 :: GHC.Base.String) ->
                 House.$w$cshowsPrec4 0# w w1) -}
98b583dc432036403983fa0391353b95
  $fShowName_$cshow :: House.Name -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: House.Name) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c1 n House.$fShowCost6)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         x `cast` (House.N:Name[0])
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
98b583dc432036403983fa0391353b95
  $fShowName_$cshowList :: [House.Name] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ House.Name House.$fShowName1) -}
98b583dc432036403983fa0391353b95
  $fShowName_$cshowsPrec ::
    GHC.Types.Int -> House.Name -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: House.Name)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 House.$w$cshowsPrec4 ww1 w1 w2 }) -}
e6f4247840edd05c958ba84f9bc4b249
  $fShowPrice :: GHC.Show.Show House.Price
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.Price
                  House.$fShowPrice_$cshowsPrec
                  House.$fShowPrice_$cshow
                  House.$fShowPrice_$cshowList -}
e6f4247840edd05c958ba84f9bc4b249
  $fShowPrice1 :: House.Price -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: House.Price) (w1 :: GHC.Base.String) ->
                 House.$w$cshowsPrec3 0# w w1) -}
e6f4247840edd05c958ba84f9bc4b249
  $fShowPrice_$cshow :: House.Price -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: House.Price) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   House.$fShowCost5
                   (case x `cast` (House.N:Price[0]) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
e6f4247840edd05c958ba84f9bc4b249
  $fShowPrice_$cshowList :: [House.Price] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ House.Price
                   House.$fShowPrice1) -}
e6f4247840edd05c958ba84f9bc4b249
  $fShowPrice_$cshowsPrec ::
    GHC.Types.Int -> House.Price -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: House.Price)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 House.$w$cshowsPrec3 ww1 w1 w2 }) -}
b60b0bb938399c2b22508c545bef257d
  $fShowSubcosts :: GHC.Show.Show House.Subcosts
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.Subcosts
                  House.$fShowSubcosts_$cshowsPrec
                  House.$fShowSubcosts_$cshow
                  House.$fShowSubcosts_$cshowList -}
b60b0bb938399c2b22508c545bef257d
  $fShowSubcosts1 :: House.Subcosts -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: House.Subcosts) (w1 :: GHC.Base.String) ->
                 House.$w$cshowsPrec1 0# w w1) -}
fb4323e45c6da9997f7fe65fdcf5d33d
  $fShowSubcosts2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subcosts "#) -}
b60b0bb938399c2b22508c545bef257d
  $fShowSubcosts_$cshow :: House.Subcosts -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: House.Subcosts) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c1 n House.$fShowSubcosts2)
                   (GHC.Show.showList__
                      @ House.Cost
                      House.$fShowCost1
                      x `cast` (House.N:Subcosts[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
b60b0bb938399c2b22508c545bef257d
  $fShowSubcosts_$cshowList :: [House.Subcosts] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ House.Subcosts
                   House.$fShowSubcosts1) -}
b60b0bb938399c2b22508c545bef257d
  $fShowSubcosts_$cshowsPrec ::
    GHC.Types.Int -> House.Subcosts -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: House.Subcosts)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 House.$w$cshowsPrec1 ww1 w1 w2 }) -}
1389e109e752bc24089d4207598c0536
  $fShowUnit :: GHC.Show.Show House.Unit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ House.Unit
                  House.$fShowUnit_$cshowsPrec
                  House.$fShowUnit_$cshow
                  House.$fShowUnit_$cshowList -}
1389e109e752bc24089d4207598c0536
  $fShowUnit1 :: House.Unit -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: House.Unit) (w1 :: GHC.Base.String) ->
                 House.$w$cshowsPrec2 0# w w1) -}
1389e109e752bc24089d4207598c0536
  $fShowUnit_$cshow :: House.Unit -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: House.Unit) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c1 n House.$fShowCost3)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         x `cast` (House.N:Unit[0])
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
1389e109e752bc24089d4207598c0536
  $fShowUnit_$cshowList :: [House.Unit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ House.Unit House.$fShowUnit1) -}
1389e109e752bc24089d4207598c0536
  $fShowUnit_$cshowsPrec ::
    GHC.Types.Int -> House.Unit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: House.Unit)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 House.$w$cshowsPrec2 ww1 w1 w2 }) -}
4bc966b6f749236e0461b6fa8ee01651
  $tc'Category :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6376741606969708172##
                   10646955501443239795##
                   House.$trModule
                   House.$tc'Category1) -}
e2960c5da64d55332a3edc53eaf4c529
  $tc'Category1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Category"#) -}
36a7752bbd63e3b24c86c3d64610080e
  $tc'FixedCost :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3140246824793406186##
                   15170355043532779273##
                   House.$trModule
                   House.$tc'FixedCost1) -}
1c1f01eacc07624dedd2e856944810e7
  $tc'FixedCost1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FixedCost"#) -}
6328035fb8151256d24e0854495e5318
  $tc'House :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8012497238045310860##
                   9344151550316073554##
                   House.$trModule
                   House.$tc'House1) -}
ab2e6a1b1b7aa4e93c4ff8a84580a747
  $tc'House1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'House"#) -}
4b4002fa7d9a5ba4fea468f8bbca6a73
  $tc'Name :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1008437755568549976##
                   13702325676104305995##
                   House.$trModule
                   House.$tc'Name1) -}
e65441af6481595d093d05113ccbad16
  $tc'Name1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Name"#) -}
a88811a2e51fb99ea8a20f278af46f49
  $tc'Price :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12177193233598693177##
                   2357678375802210426##
                   House.$trModule
                   House.$tc'Price1) -}
2783641a6d05df43ad1c3422c604c454
  $tc'Price1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Price"#) -}
d544a75e9f41762858931cb50642d3ab
  $tc'Subcosts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4500461184517232631##
                   6356834963297358262##
                   House.$trModule
                   House.$tc'Subcosts1) -}
80c870aef857b3c5e2526d51f597b8f6
  $tc'Subcosts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Subcosts"#) -}
0f6245673f9c175013ddce944d39905b
  $tc'Unit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3584677485304967357##
                   17683310308413381509##
                   House.$trModule
                   House.$tc'Unit1) -}
a3d52a62e9bd2f3f613d16382ef2083b
  $tc'Unit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unit"#) -}
e98238f54d600efa60ed955025775499
  $tc'VariableCost :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11323114873988552107##
                   1268397500850286565##
                   House.$trModule
                   House.$tc'VariableCost1) -}
bccf0e4397984e8c035d30968ce3d8c7
  $tc'VariableCost1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VariableCost"#) -}
d1328ceca39426bb91f5df693cde00a1
  $tcCost :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7532392148969589071##
                   10588218670123044698##
                   House.$trModule
                   House.$tcCost1) -}
462194b3b95b72cafb348500f0027587
  $tcCost1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Cost"#) -}
391ef1ecab70dc49fcb776074699560b
  $tcHouse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4669911363444258376##
                   8311225567255028528##
                   House.$trModule
                   House.$trModule1) -}
c2cac5d1ca7ef1db6155649cf7342f4b
  $tcName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16663385749839925921##
                   499080058502269600##
                   House.$trModule
                   House.$tcName1) -}
9e78ecbf66d3a1ca28582b5a5aa683c7
  $tcName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Name"#) -}
6d7723d2f90c6c1475a236b5d324c5ff
  $tcPrice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16121237800909673600##
                   18142403606857001025##
                   House.$trModule
                   House.$tcPrice1) -}
d481b8a70753e1e63b9ec28534e30538
  $tcPrice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Price"#) -}
767c486fa478c3fd973e954c52b8d8b4
  $tcSubcosts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15307930960845298209##
                   11065735811167419673##
                   House.$trModule
                   House.$tcSubcosts1) -}
9a4fc8f86b1f7b58b69d4c5f375ff95d
  $tcSubcosts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Subcosts"#) -}
81630db14c4d3852c1944e840e7d541c
  $tcUnit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7212670377242755306##
                   14836831454589072451##
                   House.$trModule
                   House.$tcUnit1) -}
066cf6ece012834f324ceed86d7004b6
  $tcUnit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Unit"#) -}
839fe30305015c2e8d9bc1b8b142083f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module House.$trModule2 House.$trModule1) -}
f864db49d7e7759e30f9d4def4d22dff
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "House"#) -}
e477d9febf2175aecf98a07e9f1d1631
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "feasibility-0.1.0.0-LXGXKrOU6Ol96dhoSQRxrd"#) -}
b60b0bb938399c2b22508c545bef257d
  $w$cshowsPrec ::
    GHC.Prim.Int# -> House.Cost -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: House.Cost)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   House.FixedCost b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            House.$fShowCost7
                            (House.$w$cshowsPrec4
                               11#
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (House.$w$cshowsPrec3 11# b2 x)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }
                   House.VariableCost b1 b2 b3
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            House.$fShowCost4
                            (House.$w$cshowsPrec4
                               11#
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (House.$w$cshowsPrec3
                                     11#
                                     b2
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (House.$w$cshowsPrec2 11# b3 x)))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }
                   House.Category b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            House.$fShowCost2
                            (House.$w$cshowsPrec4
                               11#
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (House.$w$cshowsPrec1 11# b2 x)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) } }) -}
b60b0bb938399c2b22508c545bef257d
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> House.Subcosts -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0] -}
1389e109e752bc24089d4207598c0536
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> House.Unit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: House.Unit)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        House.$fShowCost3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              w `cast` (House.N:Unit[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           House.$fShowCost3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 w `cast` (House.N:Unit[0])
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))))) }) -}
e6f4247840edd05c958ba84f9bc4b249
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> House.Price -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: House.Price)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        House.$fShowCost5
                        (case w `cast` (House.N:Price[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           House.$fShowCost5
                           (case w `cast` (House.N:Price[0]) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
98b583dc432036403983fa0391353b95
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> House.Name -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: House.Name)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        House.$fShowCost6
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              w `cast` (House.N:Name[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           House.$fShowCost6
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 w `cast` (House.N:Name[0])
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))))) }) -}
9e7280cf4ed1ca938bd5af37ce273083
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> [House.Cost]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 11,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
227b8606c16795450f9a32303cab25fa
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 House.$wpoly_go2 @ v (GHC.Prim.int2Word# ds2) ww ww1 ww2 0# w }) -}
049477b9f14b39b6fc0cf021fba31efc
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
9e398c3146aaaf6e7d9cb40d81ea45a4
  $wpoly_go2 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
b60b0bb938399c2b22508c545bef257d
  data Cost
    = FixedCost House.Name House.Price
    | VariableCost House.Name House.Price House.Unit
    | Category House.Name House.Subcosts
c98956b4b1fbbf52d116a6ff29e13d5f
  data House
    = House {client :: GHC.Base.String,
             address :: GHC.Base.String,
             zipcode :: GHC.Types.Int,
             area :: GHC.Types.Int,
             land_area :: GHC.Types.Int,
             bedrooms :: GHC.Types.Int,
             bathrooms :: GHC.Types.Int,
             comparable_zillow_id :: GHC.Base.String,
             costs :: [House.Cost]}
98b583dc432036403983fa0391353b95
  newtype Name = Name GHC.Base.String
e6f4247840edd05c958ba84f9bc4b249
  newtype Price = Price GHC.Types.Int
b60b0bb938399c2b22508c545bef257d
  newtype Subcosts = Subcosts [House.Cost]
1389e109e752bc24089d4207598c0536
  newtype Unit = Unit GHC.Base.String
5eaa17ed69d5ad3672693206a4835ed4
  address :: House.House -> GHC.Base.String
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds2 }) -}
1f689407465976a8bd10630f6e37d51c
  area :: House.House -> GHC.Types.Int
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLL),1*U(A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds4 }) -}
6f33b192fef5beb4940ec910a3c4e203
  bathrooms :: House.House -> GHC.Types.Int
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds7 }) -}
69d97f6c54d965470e70a22678d87879
  bedrooms :: House.House -> GHC.Types.Int
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLL),1*U(A,A,A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds6 }) -}
89d0caf5c9089d47c67190a3d7a1fe8f
  client :: House.House -> GHC.Base.String
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds1 }) -}
080b393a694a2cae6ffb2c9a46fb6509
  comparable_zillow_id :: House.House -> GHC.Base.String
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds8 }) -}
4411a194867d5a21e3f57a690d4847c3
  costs :: House.House -> [House.Cost]
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds9 }) -}
f352115b6f77810b537e98f2d389578c
  land_area :: House.House -> GHC.Types.Int
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds5 }) -}
9f22417771e696d4bb6536482b5f9519
  zipcode :: House.House -> GHC.Types.Int
  RecSel Left House.House
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: House.House) ->
                 case ds of wild { House.House ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds3 }) -}
instance Data.Aeson.Types.FromJSON.FromJSON [House.House]
  = House.$fFromJSONHouse
instance GHC.Show.Show [House.Cost] = House.$fShowCost
instance GHC.Show.Show [House.House] = House.$fShowHouse
instance GHC.Show.Show [House.Name] = House.$fShowName
instance GHC.Show.Show [House.Price] = House.$fShowPrice
instance GHC.Show.Show [House.Subcosts] = House.$fShowSubcosts
instance GHC.Show.Show [House.Unit] = House.$fShowUnit
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

